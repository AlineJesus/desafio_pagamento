openapi: 3.0.0
info:
  title: API de Transferência de Valores
  description: >
    API para gerenciar transferências de valores entre usuários.


    **Regras de negócio:**
      - Usuários do tipo `lojista`` não podem realizar transferências.
      - Transferências só podem ser realizadas se o saldo do pagador for suficiente.

    **Autenticação:**
    - A API utiliza autenticação baseada em tokens.
    - Todas as requisições devem ser enviadas com o cabeçalho:
      `Authorization: Bearer <token>`

    **Documentação adicional:**
      # Documentação do Sistema de Transferência de Valores

      ## Visão Geral

      Este sistema permite a transferência de valores entre usuários, com validações específicas para diferentes tipos de usuários e notificações automáticas. Ele foi desenvolvido utilizando o framework Laravel.

      ---

      ## Funcionalidades Principais

      1. **Criação de usuários (comum e lojista)**

      2. **Transferência de Valores**:
          - Apenas usuários do tipo `comum` podem realizar transferências.
          - O sistema verifica o saldo do pagador antes de realizar a transferência.
          - Transações são registradas no banco de dados.

      3. **Validação de Documentos**:
          - Usuários do tipo `comum` devem possuir um CPF válido.
          - Usuários do tipo "shopkeeper" devem possuir um CNPJ válido.

      4. **Notificações**:
          - Após uma transferência bem-sucedida, o recebedor é notificado via e-mail.

      5. **Serviço Autorizador**:
          - Antes de realizar a transferência, o sistema consulta um serviço externo para autorização.

      ---

      ## Estrutura do Projeto

      ### Diretórios Principais

      - **app/Models**:
        - Contém os modelos `User` e `Transaction`, que representam os usuários e as transações no sistema.

      - **app/Services**:
        - `TransferService`: Lida com a lógica de transferência de valores.
        - `NotificationService`: Gerencia o envio de notificações.

      - **app/Http/Controllers**:
        - `TransactionController`: Controlador responsável por gerenciar as transferências.

      - **app/Http/Requests**:
        - `StoreUserRequest`: Valida os dados ao criar um novo usuário.
        - `TransferRequest`: Valida os dados ao realizar uma transferência.

      - **database/migrations**:
        - Contém as migrações para criar as tabelas `users` e `transactions`.

      - **database/seeders**:
        - `UserSeeder`: Popula o banco de dados com usuários iniciais.

      ---

      ## Fluxo de Transferência

      1. O usuário envia uma requisição para a API com os dados da transferência.
      2. O `TransactionController` valida a requisição e chama o `TransferService`.
      3. O `TransferService`:
        - Verifica o tipo do pagador e seu saldo.
        - Consulta o serviço autorizador externo.
        - Realiza a transferência dentro de uma transação do banco de dados.
        - Envia uma notificação ao recebedor.

      ---

      ## Configuração do Ambiente

      1. Copie o arquivo `.env.example` para `.env` e configure as variáveis de ambiente.
      2. Execute as migrações e os seeders:
        ```bash
        php artisan migrate
        php artisan db:seed --class=UserSeeder
        ```

      ---
      ## Laravel Pint
      Para grantir que o código do projeto esteja sempre formatado de maneira consistente e seguindo os padrões do Laravel e PSR-12.
      ```bash
      vendor/bin/phpstan analyse
      ```

      ---

      ## O PHPStan se concentra em encontrar erros no seu código sem realmente executá-lo.

      ## Testes

      Execute os testes automatizados para garantir o funcionamento correto do sistema:
      ```bash
      php artisan test
      ```

      ---

      ## Requisitos

      - **PHP**: Versão 8.2 ou superior.
      - **Composer**: Para gerenciar dependências.
      - **MySQL**: Banco de dados.
      - **Node.js** e **npm**: Para dependências do frontend.

      ---

      ## Observações

      - Certifique-se de que o serviço autorizador externo `https://util.devi.tools/api/v2/authorize` esteja acessível.
      - Apenas usuários com documentos ( `document` CPF ou CNPJ ) válidos podem ser criados ou realizar transferências.


  version: 1.0.0
servers:
  - url: http://localhost:8000/api
    description: Servidor local de desenvolvimento
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
paths:
  /login:
    post:
      summary: Autenticação de usuário
      description: Endpoint para autenticar um usuário e gerar um token de acesso.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "comum@teste.com"
                password:
                  type: string
                  example: "password123"
      responses:
        '200':
          description: Usuário autenticado com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
                  token_type:
                    type: string
                    example: "Bearer"
        '401':
          description: Credenciais inválidas.
  /users:
    get:
      summary: Lista usuários cadastrados
      description: Endpoint para listar usuários do sistema.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista usuários cadastrados.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Sucesso!"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        full_name:
                          type: string
                          description: Usuário comum,
                        email:
                          type: string
                        document:
                          type: string
                        balance:
                          type: number
                          example: "1101.47"
                        type:
                          type: string
                          example: "common"
                        id:
                          type: string
                    example:
                      - full_name: "João Silva"
                        email: "joao.silva@example.com"
                        document: "85578814018"
                        type: "common"
                        balance: 1101.47
                        id: "1"
                      - full_name: "Maria Souza"
                        email: "maria.souza@example.com"
                        document: "40125694000108"
                        type: "shopkeeper"
                        balance: 985.50
                        id: "2"
        '422':
          description: Erro de validação.
    post:
      summary: Criação de um novo usuário
      description: Endpoint para criar um novo usuário no sistema.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                  data:
                    type: array
                  full_name:
                    type: string
                    example: "João Silva"
                  email:
                    type: string
                    example: "joao.silva@example.com"
                  document:
                    type: string
                    example: "99422401011"
                  type:
                    type: string
                    enum: [common, shopkeeper]
                    example: "common"
                  balance:
                    type: number
                    format: float
                    example: 1000.00
                  id:
                    type: string
      responses:
        '201':
          description: Usuário criado com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Usuário criado com sucesso!"
                  data:
                    type: object
        '422':
          description: Erro de validação.
    patch:
      summary: Atualizar saldo de usuário
      description: Endpoint para atualizar o saldo do usuario tipo common. Esse valor deve ser positivo e será incrementado ao saldo que já existir.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                balance:
                  type: number
                  format: float
                  example: 1000.00
      responses:
        '200':
          description: Usuário criado com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Saldo atualizado com sucesso!!"
                  balance::
                    type: number
                    format: float
                    example: 1000.00
        '422':
          description: Erro de validação.
  /transfer:
    post:
      summary: Transferência de valores
      description: >
        Endpoint para realizar transferências de valores entre usuários.



        **Regras de negócio:**

        - Usuários do tipo `lojistas` - "shopkeeper" não podem enviar dinheiro.


        - Usuários sem saldo suficiente não podem realizar transferências.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: number
                  format: float
                  example: 100.00
                payer:
                  type: integer
                  example: 1
                payee:
                  type: integer
                  example: 2
      responses:
        '200':
          description: Transferência realizada com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Transferência realizada com sucesso."
        '422':
          description: Erro de validação ou saldo insuficiente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Saldo insuficiente."
